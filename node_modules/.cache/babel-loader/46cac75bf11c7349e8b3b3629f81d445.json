{"ast":null,"code":"var enhanceColor=function enhanceColor(normalized){if(normalized>0.04045){return Math.pow((normalized+0.055)/(1.0+0.055),2.4);}else{return normalized/12.92;}};export var RGBtoXY=function RGBtoXY(r,g,b){var rNorm=r/255.0;var gNorm=g/255.0;var bNorm=b/255.0;var rFinal=enhanceColor(rNorm);var gFinal=enhanceColor(gNorm);var bFinal=enhanceColor(bNorm);var X=rFinal*0.649926+gFinal*0.103455+bFinal*0.197109;var Y=rFinal*0.234327+gFinal*0.743075+bFinal*0.022598;var Z=rFinal*0.000000+gFinal*0.053077+bFinal*1.035763;if(X+Y+Z===0){return 0,0;}else{var xFinal=X/(X+Y+Z);var yFinal=Y/(X+Y+Z);}return[xFinal,yFinal];};export var getGradientColor=function getGradientColor(start_color,end_color,percent){// strip the leading # if it's there\nstart_color=start_color.replace(/^\\s*#|\\s*$/g,'');end_color=end_color.replace(/^\\s*#|\\s*$/g,'');// convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\nif(start_color.length===3){start_color=start_color.replace(/(.)/g,'$1$1');}if(end_color.length===3){end_color=end_color.replace(/(.)/g,'$1$1');}// get colors\nvar start_red=parseInt(start_color.substr(0,2),16),start_green=parseInt(start_color.substr(2,2),16),start_blue=parseInt(start_color.substr(4,2),16);var end_red=parseInt(end_color.substr(0,2),16),end_green=parseInt(end_color.substr(2,2),16),end_blue=parseInt(end_color.substr(4,2),16);// calculate new color\nvar diff_red=end_red-start_red;var diff_green=end_green-start_green;var diff_blue=end_blue-start_blue;diff_red=(diff_red*percent+start_red).toString(16).split('.')[0];diff_green=(diff_green*percent+start_green).toString(16).split('.')[0];diff_blue=(diff_blue*percent+start_blue).toString(16).split('.')[0];// ensure 2 digits by color\nif(diff_red.length===1)diff_red='0'+diff_red;if(diff_green.length===1)diff_green='0'+diff_green;if(diff_blue.length===1)diff_blue='0'+diff_blue;return'#'+diff_red+diff_green+diff_blue;};export var hexToRgb=function hexToRgb(hex){// Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\nvar shorthandRegex=/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;hex=hex.replace(shorthandRegex,function(m,r,g,b){return r+r+g+g+b+b;});var result=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);return result?{r:parseInt(result[1],16),g:parseInt(result[2],16),b:parseInt(result[3],16)}:null;};","map":{"version":3,"sources":["/Users/nickboston/Documents/basketball-frontend/src/util/colorFunctions.js"],"names":["enhanceColor","normalized","RGBtoXY","r","g","b","rNorm","gNorm","bNorm","rFinal","gFinal","bFinal","X","Y","Z","xFinal","yFinal","getGradientColor","start_color","end_color","percent","replace","length","start_red","parseInt","substr","start_green","start_blue","end_red","end_green","end_blue","diff_red","diff_green","diff_blue","toString","split","hexToRgb","hex","shorthandRegex","m","result","exec"],"mappings":"AAAA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,UAAD,CAAgB,CACjC,GAAIA,UAAU,CAAG,OAAjB,CAA0B,CACtB,gBAAQ,CAACA,UAAU,CAAG,KAAd,GAAwB,IAAM,KAA9B,CAAR,CAAiD,GAAjD,EACH,CAFD,IAGK,CACD,MAAOA,CAAAA,UAAU,CAAG,KAApB,CACH,CACJ,CAPD,CASA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAa,CAChC,GAAIC,CAAAA,KAAK,CAAGH,CAAC,CAAG,KAAhB,CACA,GAAII,CAAAA,KAAK,CAAGH,CAAC,CAAG,KAAhB,CACA,GAAII,CAAAA,KAAK,CAAGH,CAAC,CAAG,KAAhB,CAEA,GAAII,CAAAA,MAAM,CAAGT,YAAY,CAACM,KAAD,CAAzB,CACA,GAAII,CAAAA,MAAM,CAAGV,YAAY,CAACO,KAAD,CAAzB,CACA,GAAII,CAAAA,MAAM,CAAGX,YAAY,CAACQ,KAAD,CAAzB,CAEA,GAAII,CAAAA,CAAC,CAAGH,MAAM,CAAG,QAAT,CAAoBC,MAAM,CAAG,QAA7B,CAAwCC,MAAM,CAAG,QAAzD,CACA,GAAIE,CAAAA,CAAC,CAAGJ,MAAM,CAAG,QAAT,CAAoBC,MAAM,CAAG,QAA7B,CAAwCC,MAAM,CAAG,QAAzD,CACA,GAAIG,CAAAA,CAAC,CAAGL,MAAM,CAAG,QAAT,CAAoBC,MAAM,CAAG,QAA7B,CAAwCC,MAAM,CAAG,QAAzD,CAEA,GAAIC,CAAC,CAAGC,CAAJ,CAAQC,CAAR,GAAc,CAAlB,CAAqB,CACjB,MAAQ,GAAG,CAAX,CACH,CAFD,IAGK,CACD,GAAIC,CAAAA,MAAM,CAAGH,CAAC,EAAIA,CAAC,CAAGC,CAAJ,CAAQC,CAAZ,CAAd,CACA,GAAIE,CAAAA,MAAM,CAAGH,CAAC,EAAID,CAAC,CAAGC,CAAJ,CAAQC,CAAZ,CAAd,CACH,CAED,MAAO,CAACC,MAAD,CAASC,MAAT,CAAP,CACH,CAtBM,CAyBP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,WAAD,CAAcC,SAAd,CAAyBC,OAAzB,CAAqC,CACjE;AACAF,WAAW,CAAGA,WAAW,CAACG,OAAZ,CAAoB,aAApB,CAAmC,EAAnC,CAAd,CACAF,SAAS,CAAGA,SAAS,CAACE,OAAV,CAAkB,aAAlB,CAAiC,EAAjC,CAAZ,CAEA;AACA,GAAIH,WAAW,CAACI,MAAZ,GAAuB,CAA3B,CAA8B,CAC1BJ,WAAW,CAAGA,WAAW,CAACG,OAAZ,CAAoB,MAApB,CAA4B,MAA5B,CAAd,CACH,CAED,GAAIF,SAAS,CAACG,MAAV,GAAqB,CAAzB,CAA4B,CACxBH,SAAS,CAAGA,SAAS,CAACE,OAAV,CAAkB,MAAlB,CAA0B,MAA1B,CAAZ,CACH,CAED;AACA,GAAIE,CAAAA,SAAS,CAAGC,QAAQ,CAACN,WAAW,CAACO,MAAZ,CAAmB,CAAnB,CAAsB,CAAtB,CAAD,CAA2B,EAA3B,CAAxB,CACIC,WAAW,CAAGF,QAAQ,CAACN,WAAW,CAACO,MAAZ,CAAmB,CAAnB,CAAsB,CAAtB,CAAD,CAA2B,EAA3B,CAD1B,CAEIE,UAAU,CAAGH,QAAQ,CAACN,WAAW,CAACO,MAAZ,CAAmB,CAAnB,CAAsB,CAAtB,CAAD,CAA2B,EAA3B,CAFzB,CAIA,GAAIG,CAAAA,OAAO,CAAGJ,QAAQ,CAACL,SAAS,CAACM,MAAV,CAAiB,CAAjB,CAAoB,CAApB,CAAD,CAAyB,EAAzB,CAAtB,CACII,SAAS,CAAGL,QAAQ,CAACL,SAAS,CAACM,MAAV,CAAiB,CAAjB,CAAoB,CAApB,CAAD,CAAyB,EAAzB,CADxB,CAEIK,QAAQ,CAAGN,QAAQ,CAACL,SAAS,CAACM,MAAV,CAAiB,CAAjB,CAAoB,CAApB,CAAD,CAAyB,EAAzB,CAFvB,CAIA;AACA,GAAIM,CAAAA,QAAQ,CAAGH,OAAO,CAAGL,SAAzB,CACA,GAAIS,CAAAA,UAAU,CAAGH,SAAS,CAAGH,WAA7B,CACA,GAAIO,CAAAA,SAAS,CAAGH,QAAQ,CAAGH,UAA3B,CAEAI,QAAQ,CAAG,CAAEA,QAAQ,CAAGX,OAAZ,CAAuBG,SAAxB,EAAmCW,QAAnC,CAA4C,EAA5C,EAAgDC,KAAhD,CAAsD,GAAtD,EAA2D,CAA3D,CAAX,CACAH,UAAU,CAAG,CAAEA,UAAU,CAAGZ,OAAd,CAAyBM,WAA1B,EAAuCQ,QAAvC,CAAgD,EAAhD,EAAoDC,KAApD,CAA0D,GAA1D,EAA+D,CAA/D,CAAb,CACAF,SAAS,CAAG,CAAEA,SAAS,CAAGb,OAAb,CAAwBO,UAAzB,EAAqCO,QAArC,CAA8C,EAA9C,EAAkDC,KAAlD,CAAwD,GAAxD,EAA6D,CAA7D,CAAZ,CAEA;AACA,GAAIJ,QAAQ,CAACT,MAAT,GAAoB,CAAxB,CAA2BS,QAAQ,CAAG,IAAMA,QAAjB,CAC3B,GAAIC,UAAU,CAACV,MAAX,GAAsB,CAA1B,CAA6BU,UAAU,CAAG,IAAMA,UAAnB,CAC7B,GAAIC,SAAS,CAACX,MAAV,GAAqB,CAAzB,CAA4BW,SAAS,CAAG,IAAMA,SAAlB,CAE5B,MAAO,IAAMF,QAAN,CAAiBC,UAAjB,CAA8BC,SAArC,CACH,CAtCM,CAwCP,MAAO,IAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,CAAS,CAC7B;AACA,GAAIC,CAAAA,cAAc,CAAG,kCAArB,CACAD,GAAG,CAAGA,GAAG,CAAChB,OAAJ,CAAYiB,cAAZ,CAA4B,SAAUC,CAAV,CAAapC,CAAb,CAAgBC,CAAhB,CAAmBC,CAAnB,CAAsB,CACpD,MAAOF,CAAAA,CAAC,CAAGA,CAAJ,CAAQC,CAAR,CAAYA,CAAZ,CAAgBC,CAAhB,CAAoBA,CAA3B,CACH,CAFK,CAAN,CAIA,GAAImC,CAAAA,MAAM,CAAG,4CAA4CC,IAA5C,CAAiDJ,GAAjD,CAAb,CACA,MAAOG,CAAAA,MAAM,CAAG,CACZrC,CAAC,CAAEqB,QAAQ,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAY,EAAZ,CADC,CAEZpC,CAAC,CAAEoB,QAAQ,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAY,EAAZ,CAFC,CAGZnC,CAAC,CAAEmB,QAAQ,CAACgB,MAAM,CAAC,CAAD,CAAP,CAAY,EAAZ,CAHC,CAAH,CAIT,IAJJ,CAKH,CAbM","sourcesContent":["const enhanceColor = (normalized) => {\n    if (normalized > 0.04045) {\n        return ((normalized + 0.055) / (1.0 + 0.055)) ** 2.4\n    }\n    else {\n        return normalized / 12.92\n    }\n}\n\nexport const RGBtoXY = (r, g, b) => {\n    var rNorm = r / 255.0\n    var gNorm = g / 255.0\n    var bNorm = b / 255.0\n\n    var rFinal = enhanceColor(rNorm)\n    var gFinal = enhanceColor(gNorm)\n    var bFinal = enhanceColor(bNorm)\n\n    var X = rFinal * 0.649926 + gFinal * 0.103455 + bFinal * 0.197109\n    var Y = rFinal * 0.234327 + gFinal * 0.743075 + bFinal * 0.022598\n    var Z = rFinal * 0.000000 + gFinal * 0.053077 + bFinal * 1.035763\n\n    if (X + Y + Z === 0) {\n        return (0, 0)\n    }\n    else {\n        var xFinal = X / (X + Y + Z)\n        var yFinal = Y / (X + Y + Z)\n    }\n\n    return [xFinal, yFinal]\n}\n\n\nexport const getGradientColor = (start_color, end_color, percent) => {\n    // strip the leading # if it's there\n    start_color = start_color.replace(/^\\s*#|\\s*$/g, '');\n    end_color = end_color.replace(/^\\s*#|\\s*$/g, '');\n\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\n    if (start_color.length === 3) {\n        start_color = start_color.replace(/(.)/g, '$1$1');\n    }\n\n    if (end_color.length === 3) {\n        end_color = end_color.replace(/(.)/g, '$1$1');\n    }\n\n    // get colors\n    var start_red = parseInt(start_color.substr(0, 2), 16),\n        start_green = parseInt(start_color.substr(2, 2), 16),\n        start_blue = parseInt(start_color.substr(4, 2), 16);\n\n    var end_red = parseInt(end_color.substr(0, 2), 16),\n        end_green = parseInt(end_color.substr(2, 2), 16),\n        end_blue = parseInt(end_color.substr(4, 2), 16);\n\n    // calculate new color\n    var diff_red = end_red - start_red;\n    var diff_green = end_green - start_green;\n    var diff_blue = end_blue - start_blue;\n\n    diff_red = ((diff_red * percent) + start_red).toString(16).split('.')[0];\n    diff_green = ((diff_green * percent) + start_green).toString(16).split('.')[0];\n    diff_blue = ((diff_blue * percent) + start_blue).toString(16).split('.')[0];\n\n    // ensure 2 digits by color\n    if (diff_red.length === 1) diff_red = '0' + diff_red\n    if (diff_green.length === 1) diff_green = '0' + diff_green\n    if (diff_blue.length === 1) diff_blue = '0' + diff_blue\n\n    return '#' + diff_red + diff_green + diff_blue;\n};\n\nexport const hexToRgb = (hex) => {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n"]},"metadata":{},"sourceType":"module"}