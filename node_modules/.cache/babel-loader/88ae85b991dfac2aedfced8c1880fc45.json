{"ast":null,"code":"const enhanceColor = normalized => {\n  if (normalized > 0.04045) {\n    return ((normalized + 0.055) / (1.0 + 0.055)) ** 2.4;\n  } else {\n    return normalized / 12.92;\n  }\n};\n\nexport const RGBtoXY = (r, g, b) => {\n  var rNorm = r / 255.0;\n  var gNorm = g / 255.0;\n  var bNorm = b / 255.0;\n  var rFinal = enhanceColor(rNorm);\n  var gFinal = enhanceColor(gNorm);\n  var bFinal = enhanceColor(bNorm);\n  var X = rFinal * 0.649926 + gFinal * 0.103455 + bFinal * 0.197109;\n  var Y = rFinal * 0.234327 + gFinal * 0.743075 + bFinal * 0.022598;\n  var Z = rFinal * 0.000000 + gFinal * 0.053077 + bFinal * 1.035763;\n\n  if (X + Y + Z === 0) {\n    return 0, 0;\n  } else {\n    var xFinal = X / (X + Y + Z);\n    var yFinal = Y / (X + Y + Z);\n  }\n\n  return [xFinal, yFinal];\n};\n_c = RGBtoXY;\nexport const getGradientColor = (start_color, end_color, percent) => {\n  // strip the leading # if it's there\n  start_color = start_color.replace(/^\\s*#|\\s*$/g, '');\n  end_color = end_color.replace(/^\\s*#|\\s*$/g, ''); // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\n\n  if (start_color.length === 3) {\n    start_color = start_color.replace(/(.)/g, '$1$1');\n  }\n\n  if (end_color.length === 3) {\n    end_color = end_color.replace(/(.)/g, '$1$1');\n  } // get colors\n\n\n  var start_red = parseInt(start_color.substr(0, 2), 16),\n      start_green = parseInt(start_color.substr(2, 2), 16),\n      start_blue = parseInt(start_color.substr(4, 2), 16);\n  var end_red = parseInt(end_color.substr(0, 2), 16),\n      end_green = parseInt(end_color.substr(2, 2), 16),\n      end_blue = parseInt(end_color.substr(4, 2), 16); // calculate new color\n\n  var diff_red = end_red - start_red;\n  var diff_green = end_green - start_green;\n  var diff_blue = end_blue - start_blue;\n  diff_red = (diff_red * percent + start_red).toString(16).split('.')[0];\n  diff_green = (diff_green * percent + start_green).toString(16).split('.')[0];\n  diff_blue = (diff_blue * percent + start_blue).toString(16).split('.')[0]; // ensure 2 digits by color\n\n  if (diff_red.length === 1) diff_red = '0' + diff_red;\n  if (diff_green.length === 1) diff_green = '0' + diff_green;\n  if (diff_blue.length === 1) diff_blue = '0' + diff_blue;\n  return '#' + diff_red + diff_green + diff_blue;\n};\nexport const hexToRgb = hex => {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"RGBtoXY\");","map":{"version":3,"sources":["/Users/nickboston/Documents/basketball-frontend/src/util/colorFunctions.js"],"names":["enhanceColor","normalized","RGBtoXY","r","g","b","rNorm","gNorm","bNorm","rFinal","gFinal","bFinal","X","Y","Z","xFinal","yFinal","getGradientColor","start_color","end_color","percent","replace","length","start_red","parseInt","substr","start_green","start_blue","end_red","end_green","end_blue","diff_red","diff_green","diff_blue","toString","split","hexToRgb","hex","shorthandRegex","m","result","exec"],"mappings":"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","sourcesContent":["const enhanceColor = (normalized) => {\n    if (normalized > 0.04045) {\n        return ((normalized + 0.055) / (1.0 + 0.055)) ** 2.4\n    }\n    else {\n        return normalized / 12.92\n    }\n}\n\nexport const RGBtoXY = (r, g, b) => {\n    var rNorm = r / 255.0\n    var gNorm = g / 255.0\n    var bNorm = b / 255.0\n\n    var rFinal = enhanceColor(rNorm)\n    var gFinal = enhanceColor(gNorm)\n    var bFinal = enhanceColor(bNorm)\n\n    var X = rFinal * 0.649926 + gFinal * 0.103455 + bFinal * 0.197109\n    var Y = rFinal * 0.234327 + gFinal * 0.743075 + bFinal * 0.022598\n    var Z = rFinal * 0.000000 + gFinal * 0.053077 + bFinal * 1.035763\n\n    if (X + Y + Z === 0) {\n        return (0, 0)\n    }\n    else {\n        var xFinal = X / (X + Y + Z)\n        var yFinal = Y / (X + Y + Z)\n    }\n\n    return [xFinal, yFinal]\n}\n\n\nexport const getGradientColor = (start_color, end_color, percent) => {\n    // strip the leading # if it's there\n    start_color = start_color.replace(/^\\s*#|\\s*$/g, '');\n    end_color = end_color.replace(/^\\s*#|\\s*$/g, '');\n\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\n    if (start_color.length === 3) {\n        start_color = start_color.replace(/(.)/g, '$1$1');\n    }\n\n    if (end_color.length === 3) {\n        end_color = end_color.replace(/(.)/g, '$1$1');\n    }\n\n    // get colors\n    var start_red = parseInt(start_color.substr(0, 2), 16),\n        start_green = parseInt(start_color.substr(2, 2), 16),\n        start_blue = parseInt(start_color.substr(4, 2), 16);\n\n    var end_red = parseInt(end_color.substr(0, 2), 16),\n        end_green = parseInt(end_color.substr(2, 2), 16),\n        end_blue = parseInt(end_color.substr(4, 2), 16);\n\n    // calculate new color\n    var diff_red = end_red - start_red;\n    var diff_green = end_green - start_green;\n    var diff_blue = end_blue - start_blue;\n\n    diff_red = ((diff_red * percent) + start_red).toString(16).split('.')[0];\n    diff_green = ((diff_green * percent) + start_green).toString(16).split('.')[0];\n    diff_blue = ((diff_blue * percent) + start_blue).toString(16).split('.')[0];\n\n    // ensure 2 digits by color\n    if (diff_red.length === 1) diff_red = '0' + diff_red\n    if (diff_green.length === 1) diff_green = '0' + diff_green\n    if (diff_blue.length === 1) diff_blue = '0' + diff_blue\n\n    return '#' + diff_red + diff_green + diff_blue;\n};\n\nexport const hexToRgb = (hex) => {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n"]},"metadata":{},"sourceType":"module"}