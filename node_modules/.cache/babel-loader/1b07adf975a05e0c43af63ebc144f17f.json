{"ast":null,"code":"var _jsxFileName = \"/Users/nickboston/Documents/basketball-frontend/src/components/Calibration.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Slider } from \"@material-ui/core\";\nimport Modal from \"react-modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst useStyles = makeStyles(theme => ({\n  mymodal: {\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    border: '1px solid #ccc',\n    background: '#fff',\n    overflow: 'auto',\n    borderRadius: 20,\n    outline: 'none',\n    padding: '40px',\n    width: '700px',\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n      height: '100vh'\n    }\n  },\n  modalBox: {\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    width: '400px',\n    padding: '50px',\n    borderRadius: 20,\n    transform: 'translate(-50%, -50%)',\n    textAlign: 'center',\n    backgroundColor: \"white\",\n    animation: '$lightGlow 20s ease infinite',\n    '@media (max-width:600px)': {\n      width: '100vw',\n      height: '100vh',\n      paddingTop: 200\n    }\n  },\n  myoverlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.75)'\n  },\n  modalHeader: {\n    fontFamily: 'Roboto',\n    fontWeight: 500,\n    margin: '0 0 30px 0'\n  },\n  modalFooter: {\n    display: 'flex',\n    margin: '40px 0 0px',\n    justifyContent: 'center',\n    fontFamily: 'Roboto Mono',\n    fontWeight: 700\n  },\n  buttonStyle: {\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    fontSize: '1em',\n    fontFamily: 'Roboto',\n    fontWeight: '500',\n    border: 'none',\n    margin: '0 auto',\n    padding: '20px 30px',\n    textTransform: 'uppercase',\n    borderRadius: '50px'\n  },\n  buttonBlack: {\n    backgroundColor: 'black',\n    color: 'white'\n  },\n  modalSlider: {\n    marginBottom: 30,\n    '@media (max-width:600px)': {\n      width: '80vw'\n    }\n  }\n}));\nconst Calibration = /*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n\n  const classes = useStyles();\n  const [isOpen, setIsOpen] = useState(false);\n  const [value, setValue] = useState(30);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const submitDelay = () => {\n    clearInterval(props.currentIntervalId);\n    props.setDelay(value * 1000);\n    props.closeScreen();\n  }; // const toggleModal = () => {\n  //     setIsOpen(!isOpen);\n  // }\n  // const closeScreen = () => {\n  //     props.setIsOpen(false)\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: props.isOpen,\n      onRequestClose: props.closeScreen,\n      contentLabel: \"My dialog\",\n      className: classes.modalBox,\n      overlayClassName: classes.myoverlay,\n      closeTimeoutMS: 300,\n      shouldCloseOnOverlayClick: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: classes.logoContainerColorPicker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: classes.modalHeader,\n          children: \"Calibrate Latency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [value, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          className: classes.modalSlider,\n          value: value,\n          min: 0,\n          max: 240,\n          \"aria-label\": \"Disabled slider\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitDelay,\n          className: `${classes.buttonStyle} ${classes.buttonBlack}`,\n          children: \"CONFIRM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}, \"4vHWGm7BXSoV/He0bBHWrOOzXO0=\", false, function () {\n  return [useStyles];\n}));\n_c2 = Calibration;\nexport default Calibration;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Calibration$React.memo\");\n$RefreshReg$(_c2, \"Calibration\");","map":{"version":3,"sources":["/Users/nickboston/Documents/basketball-frontend/src/components/Calibration.js"],"names":["React","useState","makeStyles","Slider","Modal","setAppElement","useStyles","theme","mymodal","position","top","left","transform","border","background","overflow","borderRadius","outline","padding","width","breakpoints","down","height","modalBox","textAlign","backgroundColor","animation","paddingTop","myoverlay","right","bottom","modalHeader","fontFamily","fontWeight","margin","modalFooter","display","justifyContent","buttonStyle","alignItems","cursor","fontSize","textTransform","buttonBlack","color","modalSlider","marginBottom","Calibration","memo","props","classes","isOpen","setIsOpen","value","setValue","handleChange","event","newValue","submitDelay","clearInterval","currentIntervalId","setDelay","closeScreen","logoContainerColorPicker"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Slider } from \"@material-ui/core\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\nconst useStyles = makeStyles((theme) => ({\n    mymodal: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        border: '1px solid #ccc',\n        background: '#fff',\n        overflow: 'auto',\n        borderRadius: 20,\n        outline: 'none',\n        padding: '40px',\n        width:'700px',\n        [theme.breakpoints.down('sm')]: {\n            width: '100vw',\n            height: '100vh',\n        }\n    },\n    modalBox: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        width:'400px',\n        padding:'50px',\n        borderRadius: 20,\n        transform: 'translate(-50%, -50%)',\n        textAlign: 'center',\n        backgroundColor: \"white\",\n        animation: '$lightGlow 20s ease infinite',\n        '@media (max-width:600px)': {\n            width: '100vw',\n            height:'100vh',\n            paddingTop:200,\n        },\n    },\n    myoverlay: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.75)',\n    },\n    modalHeader: {\n        fontFamily:'Roboto',\n        fontWeight:500,\n        margin:'0 0 30px 0',\n    },\n    modalFooter: {\n        display: 'flex',\n        margin:'40px 0 0px',\n        justifyContent: 'center',\n        fontFamily: 'Roboto Mono',\n        fontWeight: 700\n    },\n    buttonStyle: {\n        display:'flex',\n        alignItems:'center',\n        cursor: 'pointer',\n        fontSize: '1em',\n        fontFamily:'Roboto',\n        fontWeight:'500',\n        border:'none',\n        margin:'0 auto',\n        padding:'20px 30px',\n        textTransform:'uppercase',\n        borderRadius:'50px',\n    },\n    buttonBlack: {\n        backgroundColor:'black',\n        color:'white'\n    },\n    modalSlider: {\n        marginBottom:30,\n        '@media (max-width:600px)': {\n            width: '80vw'\n        },\n    }\n}));\n\nconst Calibration = React.memo((props) => {\n    const classes = useStyles();\n    const [isOpen, setIsOpen] = useState(false);\n    const [value, setValue] = useState(30);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const submitDelay = () => {\n        clearInterval(props.currentIntervalId)\n        props.setDelay(value * 1000)\n        props.closeScreen()\n    }\n\n\n    // const toggleModal = () => {\n    //     setIsOpen(!isOpen);\n    // }\n\n    // const closeScreen = () => {\n    //     props.setIsOpen(false)\n    // }\n\n\n    return (\n        <div className=\"App\">\n\n            <Modal\n                isOpen={props.isOpen}\n                onRequestClose={props.closeScreen}\n                contentLabel=\"My dialog\"\n                className={classes.modalBox}\n                overlayClassName={classes.myoverlay}\n                closeTimeoutMS={300}\n                shouldCloseOnOverlayClick={true}\n            >\n                <div>\n                    <div class={classes.logoContainerColorPicker}>\n                    {/* <img className={classes.logo} src={getLogoUrl(team)}></img> */}\n                    </div>\n                    <h1 className={classes.modalHeader}>Calibrate Latency</h1>\n                    <h2>{value}s</h2>\n                    <Slider className={classes.modalSlider} value={value} min={0} max={240} aria-label=\"Disabled slider\" onChange={handleChange} />\n                        <button onClick={submitDelay} className={`${classes.buttonStyle} ${classes.buttonBlack}`}>CONFIRM</button>\n                </div>\n            </Modal>\n        </div>\n    )\n})\n\nexport default Calibration\n"]},"metadata":{},"sourceType":"module"}